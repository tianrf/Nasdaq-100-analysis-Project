Nasdaq_price<-read.csv('Nasdaq.csv')
Pt=xts(Nasdaq_price$Adj.Close,order.by=as.Date(Nasdaq_price$Date))
library(timeDate)
library(xts)
library(forecast)
Nasdaq_price<-read.csv('Nasdaq.csv')
Pt=xts(Nasdaq_price$Adj.Close,order.by=as.Date(Nasdaq_price$Date))
Nasdaq_price
is.na(Pt)
Pt[is.na(Pt)]\
Pt[is.na(Pt)]
library(timeDate)
library(xts)
library(forecast)
Nasdaq_price<-read.csv('Nasdaq.csv')
Pt=xts(Nasdaq_price$Adj.Close,order.by=as.Date(Nasdaq_price$Date))
sum(is.na(Pt))
#sapply(index(Pt[is.na(Pt)]),function(x){Pt[x]<-(Pt[x-1]+Pt[x+1])/2})
t<-list(index(Pt[is.na(Pt)]))
for(i in t){
print(i)
Pt[i]<-(as.numeric(Pt[i-1])+as.numeric(Pt[i+1]))/2
}
sum(is.na(Pt))
rt<-diff(log(Pt))[-1]
summary<-to.weekly(Pt, name="Nasdaq_price")
plot(Pt)
plot(rt)
acf(rt,na.action = na.pass)
pacf(rt,na.action = na.pass)
library(tibble)
library(tidyverse)
library(ggplot2)
d<-index(Pt)
all_data<-as_tibble(cbind(Pt,rt))%>%
mutate(date=d,Period=ifelse(date<='2020-2-19','Befor 2020-02','Objective Period'))
ggplot(aes(date,Pt),data=all_data)+
geom_line(aes(col=Period))+
labs(title=" overall Nasdaq-100 index trend",
x="DATE",'Close Price',y='Close Price')+
theme_light()+
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = 0.5))
ggplot(aes(date,rt),data=all_data)+
geom_line(aes(col=Period))+
labs(title=" Log Return of Nasdaq-100 index",
x="DATE",'Log Return',y='Log Return')+
theme_light()+
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = 0.5))
ggplot(aes(date,Pt),data=all_data)+
geom_line()+
labs(title=" overall Nasdaq-100 index trend",
x="DATE",'Close Price',y='Close Price')+
theme_light()+
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = 0.5))
ggplot(aes(date,rt),data=all_data)+
geom_line()+
labs(title=" Log Return of Nasdaq-100 index",
x="DATE",'Log Return',y='Log Return')+
theme_light()+
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = 0.5))
ggplot(aes(date,rt),data=all_data)+
geom_line()+
labs(title=" Log Return of Nasdaq-100 index",
x="DATE",'Log Return',y='Log Return')+
theme_light()+
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = 0.5))
library(tseries)
adf.test(rt)
Pt[which.max(Pt)]
rt_subset<-rt[index(rt)<='2020-02-19']
rt_test<-rt[index(rt)>'2020-02-19']
AIC_p_q_select<-matrix(NA,nrow=5,ncol=5)
for(p in 0:4){
for(q in 0:4){
model_tmp<-arima(rt_subset, order = c(p,0,q),include.mean = T)
AIC_p_q_select[p+1,q+1]<-model_tmp$aic
}
}
which(AIC_p_q_select == min(AIC_p_q_select),arr.ind=T)-1
Rt_subset.train<-arima(rt_subset, order = c(4,0,5),include.mean=T)
checkresiduals(Rt_subset.train)
Rt_subset.train
r_train_fit<-xts(fitted(Rt_subset.train),order.by=index(rt_subset))
d<-as.Date(index(r_train_fit))
return_train_fit<-exp(r_train_fit)-1
return_subset<-exp(rt_subset)-1
ARMA_summary_train<-as_tibble(cbind(return_subset,return_train_fit))%>%
mutate(date=d,res=return_subset-return_train_fit)
ggplot(aes(date,return_subset),data=ARMA_summary_train[ARMA_summary_train$date>'2008-03-01'&ARMA_summary_train$date<'2008-08-01',])+
geom_line(col='red')+
geom_line(aes(date,return_train_fit),col='blue')+
theme_light()
ggplot(aes(date,res),data=ARMA_summary_train[ARMA_summary_train$date>'2008-03-01'&ARMA_summary_train$date<'2008-08-01',])+
geom_point(col='red')+
theme_light()
ggplot(aes(date,return_subset),data=ARMA_summary_train[ARMA_summary_train$date>'2012-01-01'&ARMA_summary_train$date<'2014-01-01',])+
geom_line(col='red')+
geom_line(aes(date,return_train_fit),col='blue')+
theme_light()
ggplot(aes(date,res),data=ARMA_summary_train[ARMA_summary_train$date>'2002-01-02'&ARMA_summary_train$date<'2014-01-02',])+
geom_point(col='red')+
theme_light()
library(tidyverse)
library(tibble)
library(ggplot2)
d<-as.Date(index(Pt[(length(Pt)-51):(length(Pt)-1)]))
for_arma<-forecast(Rt_subset.train,h=51)
return_predict<-exp(for_arma$mean)-1
return_predict_high_bound<-exp(for_arma$upper[,2])-1
return_predict_lower_bound<-exp(for_arma$lower[,2])-1
return_test<-exp(rt_test)-1
ARMA_summary_predict<-as_tibble(cbind(return_test,return_predict))%>%
mutate(date=d,res=return_test-return_predict,lower=return_predict_lower_bound,upper=return_predict_high_bound)
ggplot(aes(date,return_predict),data=ARMA_summary_predict)+
geom_line(aes(date,return_test,color='real return value'))+
geom_line(aes(col='51-step forecasting'))+
geom_ribbon(aes(ymin=lower, ymax=upper), alpha=0.2)+
labs(title="ARMA(4,5) 51-step forcasting",
x="DATE",y='Return')+
theme_light()+
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = 0.5))
ggplot(aes(date,res),data=ARMA_summary_predict)+
geom_point(col='red')+
theme_light()
r_train_fit<-xts(fitted(Rt_subset.train),order.by=index(rt_subset))
d<-as.Date(index(r_train_fit))
return_train_fit<-exp(r_train_fit)-1
return_subset<-exp(rt_subset)-1
ARMA_summary_train<-as_tibble(cbind(return_subset,return_train_fit))%>%
mutate(date=d,res=return_subset-return_train_fit)
ggplot(aes(date,return_subset),data=ARMA_summary_train[ARMA_summary_train$date>'2008-03-01'&ARMA_summary_train$date<'2008-08-01',])+
geom_line(col='red')+
geom_line(aes(date,return_train_fit),col='blue')+
theme_light()
ggplot(aes(date,res),data=ARMA_summary_train[ARMA_summary_train$date>'2008-03-01'&ARMA_summary_train$date<'2008-08-01',])+
geom_point(col='red')+
theme_light()
ggplot(aes(date,return_subset),data=ARMA_summary_train[ARMA_summary_train$date>'2012-01-01'&ARMA_summary_train$date<'2014-01-01',])+
geom_line(col='red')+
geom_line(aes(date,return_train_fit),col='blue')+
theme_light()
ggplot(aes(date,res),data=ARMA_summary_train[ARMA_summary_train$date>'2002-01-02'&ARMA_summary_train$date<'2014-01-02',])+
geom_point(col='red')+
theme_light()
library(tidyverse)
library(tibble)
library(ggplot2)
d<-as.Date(index(Pt[(length(Pt)-51):(length(Pt)-1)]))
for_arma<-forecast(Rt_subset.train,h=51)
return_predict<-exp(for_arma$mean)-1
return_predict_high_bound<-exp(for_arma$upper[,2])-1
return_predict_lower_bound<-exp(for_arma$lower[,2])-1
return_test<-exp(rt_test)-1
ARMA_summary_predict<-as_tibble(cbind(return_test,return_predict))%>%
mutate(date=d,res=return_test-return_predict,lower=return_predict_lower_bound,upper=return_predict_high_bound)
ggplot(aes(date,return_predict),data=ARMA_summary_predict)+
geom_line(aes(date,return_test,color='real return value'))+
geom_line(aes(col='51-step forecasting'))+
geom_ribbon(aes(ymin=lower, ymax=upper), alpha=0.2)+
labs(title="ARMA(4,5) 51-step forcasting",
x="DATE",y='Return')+
theme_light()+
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = 0.5))
ggplot(aes(date,res),data=ARMA_summary_predict)+
geom_point(col='red')+
theme_light()
d<-as.Date(index(Pt[(length(Pt)-51):(length(Pt)-1)]))
return_predict_g<-exp(test_prec_g)-1
library(rugarch)
model.garch = ugarchspec(mean.model=list(armaOrder=c(4,5),include.mean=T, archm = FALSE, archpow = 1, arfima=FALSE,external.regressors = NULL, archex = FALSE),
variance.model=list(model='sGARCH',garchOrder=c(1,1), submodel = NULL, external.regressors = NULL, variance.targeting = FALSE),
distribution.model = "norm" )
model.garch.fit = ugarchfit(data=rt, spec=model.garch, out.sample=51, solver = 'solnp')
forc=ugarchforecast(model.garch.fit,n.ahead=51)
test_prec_g<-forc@forecast$seriesFor
for_low<-test_prec_g-1.96*forc@forecast$sigmaFor
for_up<-test_prec_g+1.96*forc@forecast$sigmaFor
model.garch.fit@fit$coef
c(-1.038117e-01 -2.323414e-01  7.866501e-01  4.298095e-01  5.815240e-02  2.099079e-01 -8.096319e-01 -4.091069e-01)
c(-1.038117e-01,-2.323414e-01,  7.866501e-01,  4.298095e-01,  5.815240e-02,  2.099079e-01, -8.096319e-01, -4.091069e-01)
round(c(-1.038117e-01,-2.323414e-01,  7.866501e-01,  4.298095e-01,  5.815240e-02,  2.099079e-01, -8.096319e-01, -4.091069e-01),4)
roud(1.271138e-02,8.753221e-04)
roundc((1.271138e-02,8.753221e-04),3)
round(c((1.271138e-02,8.753221e-04),3)
round(c(1.271138e-02,8.753221e-04),3)
round(c(3.736652e-06 , 1.228615e-01 , 8.521216e-01),3)
model.garch.fit@fit$se.coef
c(9.437710e-05 2.392095e-02 1.321766e-02 1.220301e-02 2.610288e-02 2.002977e-02 2.269397e-02 1.101169e-04)
round(c(9.437710e-05 ,2.392095e-02 ,1.321766e-02 ,1.220301e-02, 2.610288e-02, 2.002977e-02, 2.269397e-02, 1.101169e-04),3)
round(c(9.437710e-05 ,2.392095e-02 ,1.321766e-02 ,1.220301e-02, 2.610288e-02, 2.002977e-02, 2.269397e-02, 1.101169e-04),4)
round(c(1.950732e-02 ,1.528891e-06 ,1.162724e-02 ,1.464948e-02),4)
round(9.437710e-05,4)
model.garch.fit@fit$coef
round(c(1.271138e-02,8.753221e-04 ,1.228615e-01,  8.521216e-01),4)
round(c(1.271138e-02,8.753221e-04 ,3.736652e-06 ,1.228615e-01,  8.521216e-01),4)
Rt_subset.train<-arima(rt_subset, order = c(4,0,5),include.mean=T)
checkresiduals(Rt_subset.train)
model.garch.fit@fit$coef
Box.test(model.garch.fit@fit$residuals/model.garch.fit@fit$sigma, lag = 1, type = 'Ljung-Box', fitdf = 0)
rt_2019_2020<-rt[index(rt)>='2019-01-01']
rt_2019_2020_train<-rt_2019_2020[1:(length(rt_2019_2020)-20)]
rt_2019_2020_test<-rt_2019_2020[(length(rt_2019_2020)-19):length(rt_2019_2020)]
acf(rt_2019_2020)
pacf(rt_2019_2020)
AIC_p_q_select<-matrix(NA,nrow=6,ncol=6)
for(p in 0:5){
for(q in 0:5){
model_tmp<-arima(rt_2019_2020_train, order = c(p,0,q),include.mean = T)
AIC_p_q_select[p+1,q+1]<-model_tmp$aic
}
}
which(AIC_p_q_select == min(AIC_p_q_select),arr.ind=T)-1
Rt_2019_2020.train<-arima(rt_2019_2020_train, order = c(4,0,5),include.mean=T)
checkresiduals(Rt_2019_2020.train)
Rt_2019_2020.train$coef
r_train_2019_2020_fit<-xts(fitted(Rt_2019_2020.train),order.by=index(rt_2019_2020_train))
d<-as.Date(index(r_train_2019_2020_fit))
return_2019_2020_train_fit<-exp(r_train_2019_2020_fit)-1
return_2019_2020_train<-exp(rt_2019_2020_train)-1
ARMA_2019_2020_summary_train<-as_tibble(cbind(return_2019_2020_train,return_2019_2020_train_fit))%>%
mutate(date=d,res=return_2019_2020_train-return_2019_2020_train_fit)
ggplot(aes(date,return_2019_2020_train),data=ARMA_2019_2020_summary_train)+
geom_line(col='red')+
geom_line(aes(date,return_2019_2020_train_fit),col='blue')+
theme_light()
ggplot(aes(date,res),data=ARMA_2019_2020_summary_train)+
geom_point(col='red')+
theme_light()
d<-as.Date(index(rt_2019_2020_test))
for_arma_2019_2020<-forecast(Rt_2019_2020.train,h=20)
test_2019_2020_predict<-for_arma_2019_2020$mean
return_2019_2020_predict<-exp(test_2019_2020_predict)-1
return_2019_2020_predict_high_bound<-exp(for_arma_2019_2020$upper[,2])-1
return_2019_2020_predict_lower_bound<-exp(for_arma_2019_2020$lower[,2])-1
return_test_2019_2020<-exp(rt_2019_2020_test)-1
ARMA_summary_2019_2020_predict<-as_tibble(cbind(return_test_2019_2020,return_2019_2020_predict,upper=return_2019_2020_predict_high_bound,lower=return_2019_2020_predict_lower_bound))%>%
mutate(date=d,res=return_test_2019_2020-return_2019_2020_predict)
ggplot(aes(date,return_test_2019_2020),data=ARMA_summary_2019_2020_predict)+
geom_line(aes(col='real return value'))+
geom_line(aes(date,return_2019_2020_predict,col='20-step forecasting'))+
geom_ribbon(aes(ymin=lower, ymax=upper), alpha=0.2)+
labs(title="ARMA(4,5) 20-step forcasting",
x="DATE",y='Return')+
theme_light()+
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = 0.5))
ggplot(aes(date,res),data=ARMA_summary_2019_2020_predict)+
geom_point(col='red')+
labs(title="ARMA(4,5) Test Error",
x="DATE",y='Res')+
theme_light()+
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = 0.5))
model.garch = ugarchspec(mean.model=list(armaOrder=c(4,3),include.mean=T, archm = FALSE, archpow = 1, arfima=F,external.regressors = NULL, archex = FALSE),
variance.model=list(model='sGARCH',garchOrder=c(1,1), submodel = NULL, external.regressors = NULL, variance.targeting = FALSE),
distribution.model = "norm" )
model.garch.fit = ugarchfit(data=rt_2019_2020, spec=model.garch, out.sample=20, solver = 'solnp')
r_train_2019_2020_fit_g<-xts( model.garch.fit@fit$fitted.values,order.by=index(rt_2019_2020_train))
d<-as.Date(index(r_train_2019_2020_fit))
return_2019_2020_train_fit<-exp(r_train_2019_2020_fit_g)-1
return_2019_2020_train<-exp(rt_2019_2020_train)-1
Garch_2019_2020_summary_train<-as_tibble(cbind(return_2019_2020_train,return_2019_2020_train_fit))%>%
mutate(date=d,res=return_2019_2020_train-return_2019_2020_train_fit)
ggplot(aes(date,return_2019_2020_train),data=Garch_2019_2020_summary_train)+
geom_line(col='red')+
geom_line(aes(date,return_2019_2020_train_fit),col='blue')+
theme_light()
ggplot(aes(date,res),data=Garch_2019_2020_summary_train)+
geom_point(col='red')+
theme_light()
d<-as.Date(index(rt_2019_2020_test))
forc=ugarchforecast(model.garch.fit,n.ahead=20)
test_prec_2019_2020_g<-forc@forecast$seriesFor
for_low_2019_2020_g<-test_prec_2019_2020_g-1.96*forc@forecast$sigmaFor
for_up_2019_2020_g<-test_prec_2019_2020_g+1.96*forc@forecast$sigmaFor
return_test_2019_2020_g<-exp(test_prec_2019_2020_g)-1
return_test_2019_2020_g_upper<-exp(for_up_2019_2020_g)-1
return_test_2019_2020_g_lower<-exp(for_low_2019_2020_g)-1
Garch_summary_2019_2020_predict<-as_tibble(cbind(return_test_2019_2020,return_test_2019_2020_g))%>%
mutate(date=d,res=return_test_2019_2020-return_test_2019_2020_g,upper=return_test_2019_2020_g_upper,lower=return_test_2019_2020_g_lower)
ggplot(aes(date,return_test_2019_2020),data=Garch_summary_2019_2020_predict)+
geom_line(aes(col='real return value'))+
geom_line(aes(date,return_test_2019_2020_g,col='20-step forecasting'))+
geom_ribbon(aes(ymin=lower, ymax=upper), alpha=0.2)+
labs(title="ARMA(4,3)-GARCH(1,1) 20-step forcasting",
x="DATE",y='Return')+
theme_light()+
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = 0.5))
ggplot(aes(date,res),data=Garch_summary_2019_2020_predict)+
geom_point(col='red')+
labs(title="ARMA(4,3)-GARCH(1,1) Test Error",
x="DATE",y='Res')+
theme_light()+
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = 0.5))
head(Rt_2019_2020)
head(rt_2019_2020)
tail(rt_2019_2020)
length(rt_2019_2020)
length(rt_2019_2020_train)
rt_2019_2020<-rt[index(rt)>='2019-01-01']
rt_2019_2020_train<-rt_2019_2020[1:(length(rt_2019_2020)-20)]
rt_2019_2020_test<-rt_2019_2020[(length(rt_2019_2020)-19):length(rt_2019_2020)]
acf(rt_2019_2020)
pacf(rt_2019_2020)
AIC_p_q_select<-matrix(NA,nrow=6,ncol=6)
for(p in 0:5){
for(q in 0:5){
model_tmp<-arima(rt_2019_2020_train, order = c(p,0,q),include.mean = T)
AIC_p_q_select[p+1,q+1]<-model_tmp$aic
}
}
which(AIC_p_q_select == min(AIC_p_q_select),arr.ind=T)-1
Rt_2019_2020.train<-arima(rt_2019_2020_train, order = c(4,0,5),include.mean=T)
checkresiduals(Rt_2019_2020.train)
Rt_2019_2020.train$coef
Rt_2019_2020.train
Rt_2019_2020.train<-arima(rt_2019_2020_train, order = c(4,0,5),include.mean=T)
checkresiduals(Rt_2019_2020.train)
Rt_2019_2020.train$coef
r_train_2019_2020_fit<-xts(fitted(Rt_2019_2020.train),order.by=index(rt_2019_2020_train))
d<-as.Date(index(r_train_2019_2020_fit))
return_2019_2020_train_fit<-exp(r_train_2019_2020_fit)-1
return_2019_2020_train<-exp(rt_2019_2020_train)-1
ARMA_2019_2020_summary_train<-as_tibble(cbind(return_2019_2020_train,return_2019_2020_train_fit))%>%
mutate(date=d,res=return_2019_2020_train-return_2019_2020_train_fit)
ggplot(aes(date,return_2019_2020_train),data=ARMA_2019_2020_summary_train)+
geom_line(col='red')+
geom_line(aes(date,return_2019_2020_train_fit),col='blue')+
theme_light()
ggplot(aes(date,res),data=ARMA_2019_2020_summary_train)+
geom_point(col='red')+
theme_light()
d<-as.Date(index(rt_2019_2020_test))
for_arma_2019_2020<-forecast(Rt_2019_2020.train,h=20)
test_2019_2020_predict<-for_arma_2019_2020$mean
return_2019_2020_predict<-exp(test_2019_2020_predict)-1
return_2019_2020_predict_high_bound<-exp(for_arma_2019_2020$upper[,2])-1
return_2019_2020_predict_lower_bound<-exp(for_arma_2019_2020$lower[,2])-1
return_test_2019_2020<-exp(rt_2019_2020_test)-1
ARMA_summary_2019_2020_predict<-as_tibble(cbind(return_test_2019_2020,return_2019_2020_predict,upper=return_2019_2020_predict_high_bound,lower=return_2019_2020_predict_lower_bound))%>%
mutate(date=d,res=return_test_2019_2020-return_2019_2020_predict)
ggplot(aes(date,return_test_2019_2020),data=ARMA_summary_2019_2020_predict)+
geom_line(aes(col='real return value'))+
geom_line(aes(date,return_2019_2020_predict,col='20-step forecasting'))+
geom_ribbon(aes(ymin=lower, ymax=upper), alpha=0.2)+
labs(title="ARMA(4,5) 20-step forcasting",
x="DATE",y='Return')+
theme_light()+
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = 0.5))
ggplot(aes(date,res),data=ARMA_summary_2019_2020_predict)+
geom_point(col='red')+
labs(title="ARMA(4,5) Test Error",
x="DATE",y='Res')+
theme_light()+
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = 0.5))
model.garch = ugarchspec(mean.model=list(armaOrder=c(4,3),include.mean=T, archm = FALSE, archpow = 1, arfima=F,external.regressors = NULL, archex = FALSE),
variance.model=list(model='sGARCH',garchOrder=c(1,1), submodel = NULL, external.regressors = NULL, variance.targeting = FALSE),
distribution.model = "norm" )
model.garch.fit = ugarchfit(data=rt_2019_2020, spec=model.garch, out.sample=20, solver = 'solnp')
model.garch.fit@fit$coef
round(c(-1.743061e+00,-1.276998e+00 ,-4.744398e-01 ,-1.984396e-01  ,1.700167e+00 , 1.133742e+00  ,1.998765e-01),4)
round(c(2.170274e-03,8.274573e-06,4.273159e-01 ,5.716841e-01 ),4)
model.garch.fit@fit$se.coef
round(c(4.019071e-02 ,1.766793e-01, 2.020258e-01, 7.106544e-02, 1.372727e-01, 1.612414e-01, 5.969066e-02),4)
round(c(2.934373e-04,8.461524e-02, 4.872421e-02))
round(c(2.934373e-04,8.461524e-02, 4.872421e-02),4)
round(c(2.934373e-04,2.043931e-06,8.461524e-02, 4.872421e-02),4)
rt_2019_2020_train
rt_2019_2020_test
